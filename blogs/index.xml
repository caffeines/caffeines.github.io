<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Caffeines</title>
    <link>https://www.sadat.me/blogs/</link>
    <description>Recent content on Caffeines</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Mar 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.sadat.me/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Worktrees</title>
      <link>https://www.sadat.me/blogs/posts/git/worktree/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.sadat.me/blogs/posts/git/worktree/</guid>
      <description>&lt;h1 id=&#34;git-worktrees-a-powerful-feature-for-managing-multiple-working-directories&#34;&gt;Git Worktrees: A Powerful Feature for Managing Multiple Working Directories&lt;/h1&gt;&#xA;&lt;p&gt;Git worktrees are one of the most underutilized yet powerful features in Git. They allow us to maintain multiple working directories from a single Git repository, each with its own branch checked out. In this blog post, we’ll explore what worktrees are, their benefits, and how to effectively use them in your development workflow.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-git-worktree&#34;&gt;What is a Git Worktree?&lt;/h2&gt;&#xA;&lt;p&gt;A Git worktree is an additional working directory linked to our main repository. Think of it as a way to check out multiple branches simultaneously, each in its own directory, while sharing the same Git history and objects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding CPU Latency</title>
      <link>https://www.sadat.me/blogs/posts/system/cpu/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.sadat.me/blogs/posts/system/cpu/</guid>
      <description>&lt;h1 id=&#34;understanding-cpu-latency&#34;&gt;Understanding CPU Latency&lt;/h1&gt;&#xA;&lt;p&gt;CPU latency refers to the time it takes for a processor to handle a specific task or instruction. It is the delay between initiating a request and receiving the corresponding output. Lower latency is generally desirable, as it indicates quicker processing and better overall performance in computing tasks. Let’s talk about some common causes of CPU latency.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;inefficient-algorithm&#34;&gt;Inefficient Algorithm&lt;/h2&gt;&#xA;&lt;p&gt;Inefficient algorithms can significantly impact CPU latency by prolonging the time it takes to execute tasks. When an inefficient algorithm is used, the CPU has to perform unnecessary or redundant operations, leading to increased processing time. This can result in higher latency, slower response times, and overall reduced system performance. Choosing efficient algorithms is crucial for optimizing CPU usage and minimizing latency in various computing applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search</title>
      <link>https://www.sadat.me/blogs/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sadat.me/blogs/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
